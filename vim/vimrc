" Designed for vim 8+
let skip_defaults_vim=1
set nocompatible
set autoindent
set autowrite
set nonumber
set ruler
set showmode
set tabstop=4 softtabstop=4 shiftwidth=4
set smartindent
set smarttab
set colorcolumn=80
let &t_EI .= "\<Esc>[2 q"

if v:version >= 800
    " Stop vim from silently messing with files that it should not
    set nofixendofline

    " Better ASCII-friendly listchars
    set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>

    set foldmethod=manual
endif

" Mark trailing whitespace as errors
match ErrorMsg '\s\+$'

set expandtab
set number
set relativenumber
highlight NonText guifg=bg
set nobackup
set noswapfile
set nowritebackup
set icon
set hlsearch
set incsearch
set linebreak
set wildmenu

" \+<cr> clears search
map <silent> <leader><cr> :noh<cr>:redraw!<cr>

" Avoid most of the 'Hit Enter ...' messages
set shortmess=aoOtI

" Prevents truncated yanks, deletes, etc.
set viminfo='20,<1000,s1000

set formatoptions-=t   " don't auto-wrap text using text width
set formatoptions+=c   " autowrap comments using textwidth with leader
set formatoptions-=r   " don't auto-insert comment leader on enter in insert
set formatoptions-=o   " don't auto-insert comment leader on o/O in normal
set formatoptions+=q   " allow formatting of comments with gq
set formatoptions-=w   " don't use trailing whitespace for paragraphs
set formatoptions-=a   " disable auto-formatting of paragraph changes
set formatoptions-=n   " don't recognized numbered lists
set formatoptions+=j   " delete comment prefix when joining
set formatoptions-=2   " don't use the indent of second paragraph line
set formatoptions-=v   " don't use broken 'vi-compatible auto-wrapping'
set formatoptions-=b   " don't use broken 'vi-compatible auto-wrapping'
set formatoptions+=l   " long lines not broken in insert mode
set formatoptions+=m   " multi-byte character line break support
set formatoptions+=M   " don't add space before or after multi-byte char
set formatoptions-=B   " don't add space between two multi-byte chars in join
set formatoptions+=1   " don't break a line after a one-letter word
set hidden
set history=100
set ttyfast

syntax enable
filetype plugin on

if v:version >= 800 && executable('curl') && empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
    echo "Don't forget to GoInstallBinaries if you're doing Go dev."
endif

set background=dark

if filereadable(expand("~/.vim/autoload/plug.vim"))
    call plug#begin('~/.vimplugins')
    Plug 'morhetz/gruvbox'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
    call plug#end()

    hi SpellRare ctermbg=red
    hi Special ctermfg=cyan

    set laststatus=2
    set statusline=
    set statusline+=%*\ %<%.60F%*                 " path, trunc to 80 length
    set statusline+=\ [%{strlen(&ft)?&ft:'none'}] " filetype
    set statusline+=%*\ %l:%c%*                   " current line and column
    set statusline+=%*\ %p%%%*                    " percentage
    set cmdheight=1
    set updatetime=100

    " Colorscheme options
    colorscheme gruvbox
    let g:airline_theme='gruvbox'
    let g:gruvbox_contrast_dark = 'hard'

    " fzf-vim
    let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit' }
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'Type'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Character'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

    " Remappings
    let mapleader=" "
    nnoremap <silent> <Leader>b :Buffers<CR>
    nnoremap <silent> <C-f> :Files<CR>
    nnoremap <silent> <Leader>f :Rg<CR>
    nnoremap <silent> <Leader>/ :BLines<CR>
    nnoremap <silent> <Leader>' :Marks<CR>
    nnoremap <silent> <Leader>g :Commits<CR>
    nnoremap <silent> <Leader>H :Helptags<CR>
    nnoremap <silent> <Leader>hh :History<CR>
    nnoremap <silent> <Leader>h: :History:<CR>
    nnoremap <silent> <Leader>h/ :History/<CR>

    " Shell
    let g:shfmt_fmt_on_save = 1

    " Golang
    let g:go_fmt_fail_silently = 0
    let g:go_fmt_command = 'goimports'
    let g:go_fmt_autosave = 1
    let g:go_gopls_enabled = 1
    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_variable_declarations = 1
    let g:go_highlight_variable_assignments = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_diagnostic_errors = 1
    let g:go_highlight_diagnostic_warnings = 1
    let g:go_auto_type_info = 1
    let g:go_auto_sameids = 0
    au FileType go nmap <leader>t :GoTest!<CR>
    au FileType go nmap <leader>v :GoVet!<CR>
    au FileType go nmap <leader>b :GoBuild!<CR>
    au FileType go nmap <leader>c :GoCoverageToggle<CR>
    au FileType go nmap <leader>i :GoInfo<CR>
    au FileType go nmap <leader>l :GoMetaLinter!<CR>
else
    autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

vmap < <gv
vmap > >gv
map Y y$

" Disable search highlighting with <C-L> when refreshing screen
nnoremap <C-L> :nohl<CR><C-L>

set omnifunc=syntaxcomplete#Complete

" Force some file names to be specific file type
au bufnewfile,bufRead *.bash* set ft=sh
au bufnewfile,bufRead *.profile set filetype=sh
au bufnewfile,bufRead *ssh/config set filetype=sshconfig
au bufnewfile,bufRead .dockerignore set filetype=gitignore
au bufnewfile,bufRead *gitconfig set filetype=gitconfig
au bufnewfile,bufRead /tmp/psql.edit.* set syntax=sql
au bufnewfile,bufRead doc.go set spell

" Start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Functions keys
map <F1> :set number!<CR> :set relativenumber!<CR>
set pastetoggle=<F2>
map <F3> :set list!<CR>
map <F4> :set cursorline!<CR>
map <F5> :set spell!<CR>
map <F6> :set fdm=indent<CR>

" disable arrow keys (vi muscle memory)
noremap <up> :echoerr "Umm, use k instead"<CR>
noremap <down> :echoerr "Umm, use j instead"<CR>
noremap <left> :echoerr "Umm, use h instead"<CR>
noremap <right> :echoerr "Umm, use l instead"<CR>
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>

" Map alternatives the <ESC> key (<C-[> already is)
inoremap jj <Esc>
cnoremap jj <Esc>
inoremap kk <Esc>
cnoremap kk <Esc>
inoremap kj <Esc>
cnoremap kj <Esc>

" Better page down and page up
noremap <C-n> <C-d>
noremap <C-p> <C-b>
